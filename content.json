[{"title":"歡迎來到白瑕的星球！","date":"2021-04-15T07:30:19.000Z","path":"2021/04/15/歡迎！/","text":"Hi！歡迎來到白瑕的星球，小行星还在开发中，你可以先到处走走看看，或是在留言板吐槽幾句，不要进入未开发区！如果使用进程中遇到了意料之外的麻煩，請通過左邊頭像下的方式告訴他，他正等著你！","tags":[]},{"title":"v-for指令使用指南","date":"2021-04-15T05:07:19.000Z","path":"2021/04/15/v-for指令使用指南/","text":"前言最近在学Vue，其实这v-for学过去有一周了，今天看了一圈笔记感觉都是很细碎的知识点实在是没什么好写的，就这v-for记得多，就捋了捋腾上来了。 甚麽是v-for指令v-for指令使得页面可以依据data中数据的量完成页面元素的自动生成，节省工作量。 ## 三.一些注意事项 添加了v-for的元素，标签内插值表达式里的数据必须是已经在该标签的v-for里获取到的数据，否则会导致报错： 1234&lt;ul&gt; &lt;li v-for=&quot;i in objArr&quot;&gt;&#123;&#123;index&#125;&#125;&lt;/li&gt;&lt;/ul&gt; 1234567891011121314151617181920212223const app = new Vue(&#123; el: &#x27;ul&#x27;, data: &#123; arr: [1, 2, 3, 4, 5], objArr: [ &#123; id: 1, name: &#x27;a1&#x27;, hobby: &#x27;a2&#x27;, &#125;, &#123; id: 2, name: &#x27;b1&#x27;, hobby: &#x27;b2&#x27;, &#125;, &#123; id: 3, name: &#x27;c1&#x27;, hobby: &#x27;c2&#x27;, &#125; ] &#125;&#125;) 您可以看到我们先是在v-for里利用i获取到了数组objArr里的各项对象形式的数据，但是在后面的插值表达式里我们用了”index”这个v-for没有获取到的数据所以： 总结以上是我记下的关于v-for的一些知识点，感觉都是一些比较基础的知识。您要是觉得还不错，就顺手给点个赞吧 : ·）","tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Vue","slug":"Vue","permalink":"http://example.com/tags/Vue/"}]},{"title":"Vue生命周期解析","date":"2021-04-14T14:20:42.000Z","path":"2021/04/14/Vue生命周期解析/","text":"Vue生命周期解析","tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Vue","slug":"Vue","permalink":"http://example.com/tags/Vue/"}]},{"title":"CSS动画构成解剖","date":"2021-03-28T14:35:29.000Z","path":"2021/03/28/CSS动画构成解剖/","text":"CSS动画特效的基本构成 自制定和发布以来，CSS规范便颇受世人青睐。&lt;hr style=” border:solid; width:100px; height:1px;” color=#000000 size=1”&gt; @TOC CSS动画效果特别是对于专业网页设计者来说，CSS无疑是给他们的设计者带来了新的希望······运用CSS，不仅能设计出精美的网页效果，而且还能提高网页的可访问性，可维护性，从而为网页设计节省大量的时间和精力。 ————摘自《CSS权威指南》 人类居住在一颗美丽的星球上，这是一颗飘泊于太阳系中的蓝色行星，它与太阳系中的其他几颗行星一同围绕太阳系的中心——太阳，无休无止的旋转着。 一、动画效果的构成我们知道地球约每24小时就会自转一圈，每约一年围绕太阳公转一次，那么无论是自转还是公转，完成后地球必然又会回到那时她开始自转或公转的位置。如果我们把地球看作一个巨大的、加了“border-radius:50%;”的&lt; div &gt;，那么宇宙——这团巨大的黑色迷雾是否可以看作&lt; body &gt;？可以吧。地球的转动是按照一定的轨迹进行的，她自然不会随心所欲地围着太阳乱转，地球的运动轨迹是由太空中各种力互相作用最终趋于稳定形成的，这些各种各样来自四面八方的“力属性”最终规定了这颗加了“border-radius:50%;”的巨大的&lt; div &gt;的运动轨迹——“你得从这走，到那去，还得慢一点。” 1.规定目标样式属性transfrom：当我们为某个元素添加了这么个属性后，就确定了我们要让这个“大星球”动弹动弹了，无论是让它自转还是公转，都离不开transform，它的众多属性可以支持我们能想到的各种动弹的方式，在进行一些不太正当的挪动时，还可以通过组合各种transfrom属性的组合使用来调整方位。以下是transform的部分常用属性：| 属性名 | 效果 || – | – || translateX(x) | 执行X轴向的横向移动。 || translateY(y) | 执行Y轴向的纵向移动。 || translateZ(z) | 执行Z轴向的远近移动。（在非3D条件下无效） || translate3d(x,y,z) | 以上三个translate属性的集合写法，效果相同。 || rotateX(xx) | 执行以X轴为轴心的旋转。（在非3D条件下效果仅类似缩放）|| rotateY(xx) | 执行以Y轴为轴心的旋转。（在非3D条件下效果仅类似缩放） || rotateZ(xx) | 执行以Z轴为轴心的旋转。（在非3D条件下效果仅类似缩放） || scale3d(x,y,z) | 以上三个rotate属性的集合写法，效果相同。 || scaleX(x) | 执行X轴向的横向缩放。 || scaleY(y) | 执行Y轴向的纵向缩放。 || scaleZ(z) | 执行Z轴向的3D缩放。 || scale3d(x,y,z) | 以上三个scale属性的集合写法，效果相同。 || perspective(n) | 设定3D效果的必需属性，设定显示屏距离浏览器版面（即由transform-origin设置的3D元素的参考系原点）的距离，添加到父元素上，或者在@keyframes函数里作为CSS属性和变换操作写在一起。 || transfrom-style | 默认值flat，嵌套元素在2D平面中呈现; 可赋值preserve-3d 嵌套元素在3D空间中呈现 || transfrom:none | 不执行变换 || transfrom:origin | 设置元素执行旋转、位移、缩放等操作时的原点，常见用于调整旋转元素的半径 | 这里面的perspective属性当时花的时间比较长，感觉有点难理解，多说两句也方便以后查阅：perspective属性是设定3D效果的必需属性，将浏览器平面转换为立体空间。设定显示屏距离浏览器版面的距离，相对来说为施加了3D变换的元素设定|其需要参考的坐标系|距离屏幕的远近，不添加此属性，效果中不会出现远近的概念。比如设置了perspective为200px;那么transformZ的值越接近200，与屏幕的距离便越近，看上去也就越大（近大远小嘛…），超过200就跑到头里甚至身后，自然就看不到。 二、控制运动路径上面说到给这个“border-radius:50%;”的巨型添加了动作，但是你会发现它一闪就完成了（很快啊！），地球如果如此运作，后果是不堪设想的。效果上来看也很不自然，这种不自然的感觉，源于“过程”的缺少，添加运动属性的元素在受到影响后会马上执行——这也就意味着我们马上就能看到执行完后的样子，这种速度有时候不会带来好的结果。关于对这段过程进行限速，常用的方法有两种： 过渡属性transition 动画函数调用属性animation transition先说transition属性，一种相对简单的方法，但在过程控制的精细度方面不如可以调用动画函数来控制的animation属性，在书写的时候我们可以单写一个transition属性，然后在它后面隔一个空格仅写一个子属性的值（就像写border时那样）；也可以把它的子属性一个个罗列出来分别为他们写值，我先列出transition的四个子属性：| 子属性 | 控制目标 ||–|–|| transition-property | 要添加过渡效果的 CSS 属性 的名称（比如width\\background-color） || transition-duration | 规定完成过渡效果需要的秒数或毫秒数。 || transition-timing-function | 规定速度效果的速度曲线。 || transition-delay | 定义过渡效果开始前的延时。 | 子属性 可用值 transition-property all 或 众多CSS属性 transition-duration 时间（秒或毫秒） transition-timing-function 匀速linear、快到慢ease、持续加速ease-in、减速至停ease-out、先加速后减速ease-in-out、自定义贝塞尔曲线cubic-bezier(n,n,n,n)、分步完成，每步瞬间完成steps transition-delay 时间（秒或毫秒，负值当即开始）或 initial 或 inherit transition支持同时制定多个目标的过渡效果，但各目标的效果之间需要使用英文逗号隔开，比如： 1234567.container:hover &#123; cursor: pointer; transform: rotate(0deg) scale(1) translateY(10px); transition: background 1s linear 2s,border-radius 2s ease-in 3s; //此条中，英文逗号隔开了两个CSS属性的变化 z-index: 400;&#125; animation接下来是animation属性，这一属性支持在值中写动画函数的名字以完成对动画函数的调用，动画函数的存在使其对动画过程的控制更加的精确。与transition相同的一点是你也可以选择分写子属性或者直接写一个animation属性然后罗列各个子属性的值，我们先来看一下animation的子属性都有哪些：|子属性| 作用 ||–|–|| animation-name | 规定需要调用的keyframes动画函数的名称。 || animation-duration | 规定动画持续的总时间。 || animation-timing-function | 规定动画效果的速度曲线。 || animation-delay | 设定动画开始前的延时。 || animation-iteration-count | 设定动画需要播放的次数。 || animation-direction | 设定是否需要反向和循环播放动画。 | 子属性 可用值 animation-name 已有的keyframes动画函数名 animation-duration 时间（秒或毫秒） animation-timing-function 匀速linear、快到慢ease、持续加速ease-in、减速至停ease-out、先加速后减速ease-in-out、自定义贝塞尔曲线cubic-bezier(n,n,n,n)、分步完成，每步瞬间完成steps animation-delay 时间（秒或毫秒，负值当即开始）或 initial 或 inherit animation-iteration-count 次数（数字） animation-direction 布尔值（true 或 false） @keyframes上面说到了“动画函数”一词，我这样说仅仅是为了便于理解，这种“动画函数”其实是由“@keyframes” 进行创建的一种通过控制关键帧（keyframes）来达到控制动画过程这一目的的一种规则（但是它真的很像一种函数不是吗…），不管那么多了，下面来介绍一下“@keyframes”规则的写法： 123456789@keyframes 动画名称 &#123; from &#123; CSS属性: CSS值 或 CSS属性:子属性(子属性值); &#125; to &#123; CSS属性: CSS值 或 CSS属性:子属性(子属性值); &#125;&#125; 您大可把关键帧界定的更加细致，就像这样： 123456789@keyframes 动画名称 &#123; 50% &#123; CSS属性: CSS值 或 CSS属性:子属性(子属性值); &#125; 100% &#123; CSS属性: CSS值 或 CSS属性:子属性(子属性值); &#125;&#125; 甚至这样： 123456789101112131415161718@keyframes 动画名称 &#123; 0% &#123; CSS属性: CSS值 或 CSS属性:子属性(子属性值); &#125; 50% &#123; CSS属性: CSS值 或 CSS属性:子属性(子属性值); &#125; 70% &#123; CSS属性: CSS值 或 CSS属性:子属性(子属性值); &#125; 80% &#123; CSS属性: CSS值 或 CSS属性:子属性(子属性值); &#125; 100% &#123; CSS属性: CSS值 或 CSS属性:子属性(子属性值); &#125; &#125; 三.基本构成起始状态、目标状态 + 过程 = 完整动画四、依据路径执行动画最后一步就是生成您的动画了，依据CSS动画的基本构成原理，把控制元素目标状态的动作属性和控制过程的关键帧规定结合起来，也就是在transition属性里规定过渡效果或者在animation属性里调用您规定的关键帧@keyframes规则。下面是一个实例，关于在animation属性里调用@keyframes关键帧规则名： 123456789101112131415161718192021.row1 div &#123; animation: keyname 15s linear infinite; //关键帧函数名keyname&#125;.row2 div &#123; animation: keyname 20s linear infinite;&#125;.row3 div &#123; animation: keyname 40s linear infinite;&#125;@keyframes keyname &#123; from &#123; transform: translateX(500px); &#125; to &#123; transform: translateX(-100px); &#125;&#125; 总结这次总结了一些比较基础的CSS特效的构成模式，当然并不是所有的CSS特效都是这样的构造，如果您对这方面感兴趣的话，还是要去更多的搜集资料和各种属性、写法，但上面介绍的这些，通过与CSS和JS的结合，已经能构建出比较可观的特效，以下便是基于上述知识构建出的纯CSS特效。如果这篇文章帮到了您，我很荣幸，也期待您的指点：· ）","tags":[{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"let、const与块级作用域","date":"2021-03-08T13:52:46.000Z","path":"2021/03/08/let、const与块级作用域/","text":"let、const块级声明与块级作用域绑定","tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"ES6","slug":"ES6","permalink":"http://example.com/tags/ES6/"}]},{"title":"XMLHttpRequest对象解读&AJAX使用","date":"2021-02-25T14:38:00.000Z","path":"2021/02/25/XMLHttpRequest对象解读&AJAX使用/","text":"AJAX技术","tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"AJAX","slug":"AJAX","permalink":"http://example.com/tags/AJAX/"}]},{"title":"浏览器缓存机制","date":"2021-02-24T18:09:52.000Z","path":"2021/02/25/浏览器缓存机制/","text":"Http的Cache机制由四个部分组成，Last-Modified（If-Modified-Since）、Etag（If-None-Match）、Cache-Control、Expires ，我会在下文更详细说明它们在Cache机制中的作用。","tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"JavaScript正则表达式（1）","date":"2021-02-23T19:51:51.000Z","path":"2021/02/24/JavaScript正则表达式（1）/","text":"正则表达式","tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"}]},{"title":"JavaScript数据类型","date":"2021-02-06T17:29:42.000Z","path":"2021/02/07/JavaScript数据类型/","text":"JavaScript数据类型","tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"}]},{"title":"JS复杂条件下的预解析","date":"2020-12-06T15:14:40.000Z","path":"2020/12/06/JS复杂条件预解析/","text":"JavaScript预解析","tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"}]},{"title":"JS预解析机制","date":"2020-12-06T15:14:40.000Z","path":"2020/12/06/JavaScript预解析机制/","text":"JavaScript预解析","tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"}]},{"title":"CSS的三大特性","date":"2020-11-27T02:30:56.000Z","path":"2020/11/27/CSS的三大特性/","text":"CSS的三大特性 下面我会依次阐述这三种特性使用时的注意事项与方法。 一、CSS层叠性在对一个元素所设置的多个不同选择器 或者 一个选择器内，对同一样式不同的值，会造成样式冲突，此时需要考虑CSS的层叠性，CSS将根据层叠特性来决定使用哪种样式。 特性简述：当出现上述情况时，CSS将会采用距离目标元素的代码最近的样式，就近原则。如下所示： 123456&lt;style&gt; div &#123; background-color: yellow; background-color: skyblue; &#125;&lt;/style&gt; 1234&lt;body&gt; &lt;div&gt;示例：CSS层叠性&lt;/div&gt;&lt;/body&gt; 依据上述，以上代码显示出盒子的颜色应当为天蓝色。以下为另一种情况： 12345678&lt;style&gt; div &#123; background-color: skyblue; &#125; div &#123; background-color: yellow; &#125;&lt;/style&gt; 这段代码的运行结果为黄色，下方控制黄色的选择器距离目标元素更近。 二、CSS继承性在对子级标签的样式进行设置时需要注意，其会继承其父标签中部分能被其自身继承的样式，而且“继承父元素样式”被使用的优先级低于“使用该元素被直接设定的样式”，恰当的利用这一特性可以缩减代码量，例如对多个同父子元素内字体与背景色的设置，就可以直接为其父元素设置样式，使所有子标签样式相同。 1234567891011&lt;style&gt; div &#123; color: skyblue; font-size: 15px; &#125; #继承性2 &#123; color: yellow; font-size: 30px; &#125;&lt;/style&gt; 12345678&lt;body&gt; &lt;div&gt; &lt;p&gt;示例：CSS继承性1&lt;/p&gt; &lt;p id=&quot;继承性2&quot;&gt;示例：CSS继承性2&lt;/p&gt; &lt;p&gt;示例：CSS继承性3&lt;/p&gt; &lt;/div&gt;&lt;/body&gt; 这段代码运行后，显示效果如下可以看到的是子级元素继承了父级元素的样式，但出现针对自己的样式时依然会优先使用自己专属的样式（跟能叫外卖就不会去食堂吃大锅菜是一样的）。 三、CSS优先级前面在说到CSS选择器的时候我说到了CSS的权重、优先级相关，这里也算是对那节内容的补充吧。在选择器相同的时候将需要考虑我们前面说的“层叠性”特性，而当选择器不同时，将需要考虑CSS的“优先级“特性。“选择器权重”这一概念是被“优先级”这一概念包含在内的。|选择器|选择器权重 ||–|–|| 继承或 *全选 | 0，0，0，0||元素选择器|0，0，0，1 ||类选择器、伪类选择器|0，0，1，0|ID选择器|0，1，0，0|| 继承或 *全选 | 0，0，0，0||行内样式style=” “|1，0，0，0 ||!important 重要|无穷大| 这些权重值基本可以看作数学数值个十百千，理所当然的是占位越高权重越大，在多个可选的选择器内，权重大的选择器将会被优先采用，而若是在样式后跟上!important，则选择器必定被采用，因其权重为“无限大”。下面请看一个示例： 123456789101112131415&lt;style&gt; div &#123; color: grey; font-size: 15px; &#125; #优先级 &#123; color: yellow; font-size: 30px; &#125; .示例 &#123; background-color: skyblue; &#125;&lt;/style&gt; 123&lt;body&gt; &lt;div class=&quot;示例&quot; id=&quot;优先级&quot;&gt;示例：优先级&lt;/div&gt;&lt;/body&gt; 若是按照“层叠性”的就近原则，此处应当采用class=”示例”设置的样式，但此处的选择器众多，应当参照“优先级”特性而非“层叠性”特性；ID选择器因为在所示三种选择器中为权重最高(0,1,0,0)的一种，所以即便在中间放置也依然被优先采用了。看下!important的用法： 123456789101112&lt;style&gt; div &#123; color: grey!important; font-size: 30px; &#125; #优先级 &#123; color: yellow; font-size: 50px; &#125;&lt;/style&gt; 123&lt;body&gt; &lt;div class=&quot;示例&quot; id=&quot;优先级&quot;&gt;示例：优先级&lt;/div&gt;&lt;/body&gt; 还是刚才的HTML代码，这次我为标签选择器中的颜色样式添加了!important，那么是否整个标签选择器的样式都会被采用？并没有，标签选择器中的颜色样式因为加大权重被使用，而标签选择器中的其他属性（比如设置的字号）并不能被采用，!important仅能加强某个样式属性的权重，并不能加强整个选择器的权重。 总结 以上便是CSS三大特性的相关，在下独自整理，可能并不全面，如果有帮助到您，在下荣幸之至，如果您发现了我的错误与缺陷，在下恳请您的指点，多谢！","tags":[{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"CSS選擇器的种类&使用","date":"2020-11-21T16:17:55.000Z","path":"2020/11/22/CSS選擇器的种类&使用/","text":"CSS选择器的种类&amp;使用","tags":[{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"CSS中position定位属性的使用","date":"2020-11-19T15:02:24.000Z","path":"2020/11/19/CSS中Position定位属性的使用/","text":"CSS中定位属性的使用","tags":[{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]}]